:py:mod:`reports`
=================

.. py:module:: reports

.. autoapi-nested-parse::

   Provides financial accounting reports.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   aging_schedule/index.rst
   balance_sheet/index.rst
   cashflow_statement/index.rst
   financial_statement/index.rst
   income_statement/index.rst
   trial_balance/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   reports.IncomeStatement
   reports.BalanceSheet
   reports.AgingSchedule
   reports.CashflowStatement
   reports.TrialBalance




.. py:class:: IncomeStatement(session, start_date: datetime.datetime = None, end_date: datetime.datetime = None)


   Bases: :py:obj:`python_accounting.reports.financial_statement.FinancialStatement`

   This class represents the Income Statement/Profit and Loss of a given Entity.

   .. py:attribute:: Accounts

      The Account types allowed to be in included in the report.

      :type: (Account.AccountType)

   .. py:attribute:: config
      :value: 'income_statement'

      The configuration section for the report.

      :type: (str)

   .. py:method:: __repr__() -> str


   .. py:method:: net_profit(session, start_date: datetime.datetime = None, end_date: datetime.datetime = None) -> decimal.Decimal
      :staticmethod:

      Get the value of net profit for the given period.

      :param session: The accounting session to which the report belongs.
      :type session: Session
      :param start_date: The earliest transaction date for Transaction amounts to be included in the report.
      :type start_date: datetime
      :param end_date: The latest transaction date for Transaction amounts to be included in the report.
      :type end_date: datetime

      :returns: The net profit or loss for the Entity for the period.
      :rtype: Decimal



.. py:class:: BalanceSheet(session, end_date: datetime.datetime = None)


   Bases: :py:obj:`python_accounting.reports.financial_statement.FinancialStatement`

   This class represents Financial Position/Balance Sheet of a given Entity.

   .. py:attribute:: Accounts

      The Account types allowed to be in included in the report.

      :type: (Account.AccountType)

   .. py:attribute:: config
      :value: 'balance_sheet'

      The configuration section for the report.

      :type: (str)

   .. py:method:: __repr__() -> str



.. py:class:: AgingSchedule(session, account_type: python_accounting.models.Account.AccountType, end_date: datetime.datetime = None)


   This class displays the outstanding balances for recievables and payables categorised by how long they have been outstanding.

   .. py:attribute:: brackets

      Categories of ages in days and their labels.
      ::
          {
              current (int): Days in the current bracket. Defaults to 30.
              31 - 90 days (int): Days in the quarter bracket. Defaults to 90.
              91 - 180 days (int): Days in the half year bracket. Defaults to 180.
              181 - 270 days (int): Days in the three quarters bracket. Defaults to 270.
              271 - 365 days (int): Days in the whole year bracket. Defaults to 365.
              365+ Bad Debts (int): Days in the year plus bracket. Defaults to 1000000000 (infinity).
          }

      :type: (dict)

   .. py:attribute:: balances
      :type: dict

      The total outstanding amounts per age bracket.
      ::
          {
              current (Decimal): Balances not yet due.
              31 - 90 days (Decimal): Balances outstanding for up to 90 days.
              91 - 180 days (Decimal): Balances outstanding for up to 180 days.
              181 - 270 days (Decimal): Balances outstanding for up to 270 days.
              271 - 365 days (Decimal): Balances outstanding for up to 365 days.
              365+ Bad Debts (Decimal): Balances over a year old.
          }

      :type: (dict)

   .. py:attribute:: accounts
      :type: list

      The Account who's outsanding transactions constitue the balances.

      :type: (list)

   .. py:attribute:: account_type

      (`Account.AccountType.RECEIVABLE|Account.AccountType.PAYABLE`):
      The Account type to get aged balances for. Can only be Receivable or Payable.

   .. py:attribute:: end_date
      :type: datetime.datetime

      The latest transaction date for Transaction amounts to be included
      in the balances.

      :type: (datetime)

   .. py:method:: __repr__() -> str

      Return repr(self).


   .. py:method:: _allocate_balances(transactions: list, account: python_accounting.models.Account) -> None



.. py:class:: CashflowStatement(session, start_date: datetime.datetime = None, end_date: datetime.datetime = None)


   Bases: :py:obj:`python_accounting.reports.financial_statement.FinancialStatement`

   This class represents the movement of balances of Balance Sheet accounts during the given period.

   .. py:attribute:: config
      :value: 'cashflow_statement'

      The configuration section for the report.

      :type: config (str)

   .. py:attribute:: sub_sections
      :type: dict

      The categories of the contents of the sections of the report.

      :type: sub_sections (dict)

   .. py:method:: __repr__() -> str


   .. py:method:: _get_sections(start_date: datetime.datetime = None, end_date: datetime.datetime = None, full_balance: bool = True) -> None


   .. py:method:: _print_section(section, factor=1) -> str



.. py:class:: TrialBalance(session, end_date: datetime.datetime = None)


   Bases: :py:obj:`python_accounting.reports.financial_statement.FinancialStatement`

   This class represents all the balances of the chart of accounts, compared against each other.

   .. py:attribute:: config
      :value: 'trial_balance'

      The configuration section for the report.

      :type: (str)


