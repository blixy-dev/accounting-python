:py:mod:`reports.aging_schedule`
================================

.. py:module:: reports.aging_schedule

.. autoapi-nested-parse::

   Represents amounts oustanding to/from suppliers/clients, grouped by their age.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   reports.aging_schedule.AgingSchedule




.. py:class:: AgingSchedule(session, account_type: python_accounting.models.Account.AccountType, end_date: datetime.datetime = None)


   This class displays the outstanding balances for recievables and payables categorised by how long they have been outstanding.

   .. py:attribute:: brackets

      Categories of ages in days and their labels.
      ::
          {
              current (int): Days in the current bracket. Defaults to 30.
              31 - 90 days (int): Days in the quarter bracket. Defaults to 90.
              91 - 180 days (int): Days in the half year bracket. Defaults to 180.
              181 - 270 days (int): Days in the three quarters bracket. Defaults to 270.
              271 - 365 days (int): Days in the whole year bracket. Defaults to 365.
              365+ Bad Debts (int): Days in the year plus bracket. Defaults to 1000000000 (infinity).
          }

      :type: (dict)

   .. py:attribute:: balances
      :type: dict

      The total outstanding amounts per age bracket.
      ::
          {
              current (Decimal): Balances not yet due.
              31 - 90 days (Decimal): Balances outstanding for up to 90 days.
              91 - 180 days (Decimal): Balances outstanding for up to 180 days.
              181 - 270 days (Decimal): Balances outstanding for up to 270 days.
              271 - 365 days (Decimal): Balances outstanding for up to 365 days.
              365+ Bad Debts (Decimal): Balances over a year old.
          }

      :type: (dict)

   .. py:attribute:: accounts
      :type: list

      The Account who's outsanding transactions constitue the balances.

      :type: (list)

   .. py:attribute:: account_type

      (`Account.AccountType.RECEIVABLE|Account.AccountType.PAYABLE`):
      The Account type to get aged balances for. Can only be Receivable or Payable.

   .. py:attribute:: end_date
      :type: datetime.datetime

      The latest transaction date for Transaction amounts to be included
      in the balances.

      :type: (datetime)

   .. py:method:: __repr__() -> str

      Return repr(self).


   .. py:method:: _allocate_balances(transactions: list, account: python_accounting.models.Account) -> None



