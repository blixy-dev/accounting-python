:py:mod:`models.assignment`
===========================

.. py:module:: models.assignment

.. autoapi-nested-parse::

   Represents an matching between Transactions that have an opposite effect on an Account.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   models.assignment.Assignment




.. py:class:: Assignment


   Bases: :py:obj:`python_accounting.mixins.IsolatingMixin`, :py:obj:`python_accounting.models.Base`

   Represents an assigment of a clearable type to an assignable Transaction.

   .. py:attribute:: clearables

      A list of Transaction Types
      that can be cleared by assignable Transactions.

      :type: (`list` of `Transaction.TransactionType`)

   .. py:attribute:: assignables

      A list of Transaction Types
      that can have cleareable Transactions assigned to them.

      :type: (`list` of `Transaction.TransactionType`)

   .. py:attribute:: assignment_date
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      The date of the Assignment.

      :type: (datetime)

   .. py:attribute:: transaction_id
      :type: sqlalchemy.orm.Mapped[int]

      The id of the assignable Transaction in the Assignment.

      :type: (int)

   .. py:attribute:: assigned_id
      :type: sqlalchemy.orm.Mapped[int]

      The id of the clearable Transaction|Balance in the Assignment.

      :type: (int)

   .. py:attribute:: assigned_type
      :type: sqlalchemy.orm.Mapped[str]

      The class name of the clearable Transaction|Balance in the Assignment.

      :type: (str)

   .. py:attribute:: assigned_no
      :type: sqlalchemy.orm.Mapped[str]

      The Transaction number of the clearable Transaction|Balance in the Assignment.

      :type: (str)

   .. py:attribute:: amount
      :type: sqlalchemy.orm.Mapped[decimal.Decimal]

      The amount of the Assignment.

      :type: (Decimal)

   .. py:attribute:: transaction
      :type: sqlalchemy.orm.Mapped[python_accounting.models.Transaction]

      The assignable Transaction in the Assignment.

      :type: (Transaction)

   .. py:method:: __repr__() -> str


   .. py:method:: assigned(session) -> python_accounting.models.Transaction | python_accounting.models.Balance

      Get the clearable Transaction|Balance assigned to this assigment's transaction.

      :param session: The accounting session to which the Assignment belongs.
      :type session: Session

      :returns: The model cleared by this assignment.
      :rtype: Transaction|Balance


   .. py:method:: validate(session) -> None

      Validates the Assignment properties.

      :param session: The accounting session to which the Assignment belongs.
      :type session: Session

      :raises ValueError: If the assignable Transaction or clearable Transaction|Balance could not be found.
      :raises UnassignableTransactionError: If the assignable Transaction type is not one of the assignable types.
      :raises UnclearableTransactionError: If the clearable Transaction type is not one of the clearable types.
      :raises UnpostedAssignmentError: If either the assignable or clearable Transaction is not posted.
      :raises InsufficientBalanceError: If the remaining balance in the assignable Transaction is less than the Assignment amount.
      :raises OverclearanceError: If the Assignment amount is greater than the clearable Transaction|Balance uncleared amount.
      :raises CompoundTransactionAssignmentError: If either the assignable or clearable Journal Entry is a compound Transaction.
      :raises SelfClearanceError: If the assignable and clearable Transaction of the Assignment is the same.
      :raises InvalidAssignmentAccountError: If the assignable Transaction and clearable Transaction|Balance main Accounts are not the same.
      :raises MixedAssignmentError: If either an already Transaction is being cleared or an already cleared Transaction is being assigned.

      :returns: None



