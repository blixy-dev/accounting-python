:py:mod:`models.transaction`
============================

.. py:module:: models.transaction

.. autoapi-nested-parse::

   Represents a financial Transaction.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   models.transaction.Transaction




.. py:class:: Transaction


   Bases: :py:obj:`python_accounting.mixins.IsolatingMixin`, :py:obj:`python_accounting.models.Recyclable`

   Represents a Transaction in the sense of an original source document.

   .. py:property:: tax
      :type: dict

      The taxes that have been applied to the transaction.
      - taxes (dict): The taxes applied to the Transaction and their amounts.
      - amount (str): The total tax applied to the Transaction.

   .. py:property:: is_posted
      :type: bool

      Check if the Transaction has been posted to the ledger

   .. py:property:: amount
      :type: decimal.Decimal

      The amount of the Transaction.

   .. py:attribute:: TransactionType

      Transaction Types representing standard source document Transactions.

      :type: (StrEnum)

   .. py:attribute:: __table_args__
      :value: ()

      

   .. py:attribute:: __tablename__
      :value: 'transaction'

      

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      The primary key of the Transaction database record.

      :type: (int)

   .. py:attribute:: transaction_date
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      The date of the Transaction.

      :type: (datetime)

   .. py:attribute:: transaction_no
      :type: sqlalchemy.orm.Mapped[str]

      Serially generated indentifier for the Transaction

      :type: (str)

   .. py:attribute:: transaction_type
      :type: sqlalchemy.orm.Mapped[strenum.StrEnum]

      The Transaction type of the Transaction.

      :type: (TransactionType)

   .. py:attribute:: narration
      :type: sqlalchemy.orm.Mapped[str]

      A short description of the purpose of the Transaction.

      :type: (str)

   .. py:attribute:: reference
      :type: sqlalchemy.orm.Mapped[str]

      Identifying information about the Transaction.

      :type: (`str`, optional)

   .. py:attribute:: main_account_amount
      :type: sqlalchemy.orm.Mapped[decimal.Decimal]

      The amount to be posted to the Transaction
      main Account. Only applies to compound (Journal Entry) Transactions.

      :type: (`Decimal`, optional)

   .. py:attribute:: credited
      :type: sqlalchemy.orm.Mapped[bool]

      Determines whether the Transaction amount will
      be posted to the credit side of the main Account. Defaults to True.

      :type: (`bool`, optional)

   .. py:attribute:: compound
      :type: sqlalchemy.orm.Mapped[bool]

      Determines whether the (Journal Entry) Transaction amount
      can have Line Items on both sides of the double entry.

      :type: (`bool`, optional)

   .. py:attribute:: currency_id
      :type: sqlalchemy.orm.Mapped[int]

      The id of the Currency associated with the Transaction.

      :type: (int)

   .. py:attribute:: account_id
      :type: sqlalchemy.orm.Mapped[int]

      The id of the Account model to which Transaction amounts are to be posted.

      :type: (int)

   .. py:attribute:: currency
      :type: sqlalchemy.orm.Mapped[Currency]

      The Currency associated with the Transaction.

      :type: (Currency)

   .. py:attribute:: account
      :type: sqlalchemy.orm.Mapped[python_accounting.models.Account]

      The Account model to which Transaction amounts are to be posted.

      :type: (Account)

   .. py:attribute:: line_items
      :type: sqlalchemy.orm.Mapped[Set[python_accounting.models.LineItem]]

      The Line Items models associated with the Transaction.

      :type: (Set)

   .. py:attribute:: ledgers
      :type: sqlalchemy.orm.Mapped[List[Ledger]]

      The Ledger models associated with the Transaction.

      :type: (list)

   .. py:method:: validate_line_items(key, line_item, is_remove)

      Validates adding or removing of Transaction Line Items.

      :raises PostedTransactionError: If the Transaction is posted and Line Items are added or removed from it.
      :raises ValueError: If the unsaved Line Item are added or removed from the Transaction.


   .. py:method:: validate_ledgers(key, ledger, is_remove)

      Validates adding or removing of Transaction Ledgers

      :raises ValueError: If the Transaction Ledgers are manually added or removed.


   .. py:method:: __repr__() -> str


   .. py:method:: _get_main_account(session) -> python_accounting.models.Account


   .. py:method:: _transaction_no(session, transaction_type, reporting_period) -> str


   .. py:method:: is_secure(session) -> bool

      Verify that the Transaction's Ledgers have not been tampered with.


   .. py:method:: post(session) -> None

      Posts the Transaction to the Ledger.

      :param session: The accounting session to which the Reporting Period
                      belongs.
      :type session: Session

      :raises MissingLineItemError: If the Transaction has no Line Items.

      :returns: None


   .. py:method:: contribution(session, account: python_accounting.models.Account) -> decimal.Decimal

      Gets the amount contributed by the account to the transaction total.

      :param session: The accounting session to which the Reporting Period
                      belongs.
      :type session: Session
      :param account: The Account who's contribution is to be found.
      :type account: Account

      :returns: The amount posted to the Account by the Transaction.
      :rtype: Decimal


   .. py:method:: validate(session) -> None

      Validates the Transaction properties.

      :param session: The accounting session to which the Balance belongs.
      :type session: Session

      :raises PostedTransactionError: If Transaction is already posted.
      :raises ClosedReportingPeriodError: If the Transaction date is with a Reporting Period
          in the CLOSED status.
      :raises AdjustingReportingPeriodError: If the Transaction date is with a Reporting Period
          in the ADJUSTING status and is not a Journal Entry.
      :raises InvalidTransactionDateError: If the Transaction date is exactly the beginning of
          the Reporting Period.
      :raises InvalidTransactionTypeError: If the Transaction type is being modified.
      :raises RedundantTransactionError: If the Transaction main Account is also one of its
          Line Items Accounts.

      :returns: None


   .. py:method:: validate_delete(_) -> None

      Validates if the Transaction can be deleted.

      :param session: The accounting session to which the Balance belongs.
      :type session: Session

      :raises PostedTransactionError: If Transaction is already posted.

      :returns: None



