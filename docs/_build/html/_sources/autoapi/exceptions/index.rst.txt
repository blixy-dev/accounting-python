:py:mod:`exceptions`
====================

.. py:module:: exceptions

.. autoapi-nested-parse::

   Provides exceptions arising from accounting operations.



Package Contents
----------------

.. py:exception:: AccountingExeption


   Bases: :py:obj:`Exception`

   Base accounting exception

   .. attribute:: msg

      Human readable string describing the exception.

      :type: str

   .. py:attribute:: message
      :type: str

      

   .. py:method:: __str__() -> str

      Return str(self).



.. py:exception:: AdjustingReportingPeriodError(reporting_period)


   Bases: :py:obj:`AccountingExeption`

   Only Journal Entry Transactions can be recorded for adjusting status Reporting Periods.

   :param reporting_period: The Reporting Period in question.
   :type reporting_period: ReportingPeriod


.. py:exception:: ClosedReportingPeriodError(reporting_period)


   Bases: :py:obj:`AccountingExeption`

   Transactions cannot be recorded for closed reporting periods.

   :param reporting_period: The Reporting Period in question.
   :type reporting_period: ReportingPeriod


.. py:exception:: DuplicateReportingPeriodError


   Bases: :py:obj:`AccountingExeption`

   An Entity can only have one reporting period per calendar year.


.. py:exception:: InvalidAccountTypeError(message: str)


   Bases: :py:obj:`AccountingExeption`

   The account type must be one of those given in the list.

   :param message: A string containing the list of allowed Account Types.
   :type message: str


.. py:exception:: HangingTransactionsError(model)


   Bases: :py:obj:`AccountingExeption`

   The account cannot be deleted because it has Transactions in the current reporting period.

   :param model: The model to be deleted.
   :type model: DeclarativeBase


.. py:exception:: InvalidBalanceAccountError


   Bases: :py:obj:`AccountingExeption`

   Income Statement Accounts cannot have an opening balance.


.. py:exception:: InvalidBalanceDateError


   Bases: :py:obj:`AccountingExeption`

   Unless the Entity allows for mid year balances, the balance date must be earlier than its reporting period's start.


.. py:exception:: InvalidBalanceTransactionError


   Bases: :py:obj:`AccountingExeption`

   Balance Transaction must be one of Client Invoice, Supplier Bill or Journal Entry.


.. py:exception:: InvalidCategoryAccountTypeError(account_type, category_account_type)


   Bases: :py:obj:`AccountingExeption`

   The account type must the same as the category account type.

   :param account_type: The account type of the Account.
   :type account_type: Account.AccountType
   :param category_account_type: The account type of the Category.
   :type category_account_type: Account.AccountType


.. py:exception:: InvalidLineItemAccountError(classname, account_types: list)


   Bases: :py:obj:`AccountingExeption`

   The Line Item main Account type must be one of those given in the list.

   :param classname: The type of the Transaction.
   :type classname: Transaction.TransactionType
   :param account_types: The list of allowed Account types for the Transaction.
   :type account_types: list


.. py:exception:: InvalidMainAccountError(classname, account_type: str)


   Bases: :py:obj:`AccountingExeption`

   The account type of the transaction must be of the type given.

   :param classname: The type of the Transaction.
   :type classname: Transaction.TransactionType
   :param account_type: The allowed Account type for the Transaction.
   :type account_type: str


.. py:exception:: InvalidTaxAccountError


   Bases: :py:obj:`AccountingExeption`

   A Tax account must be of type Control.


.. py:exception:: InvalidTaxChargeError(classname)


   Bases: :py:obj:`AccountingExeption`

   A Contra Entry Transaction cannot be charged Tax.

   :param classname: The type of the Transaction.
   :type classname: Transaction.TransactionType


.. py:exception:: InvalidTransactionDateError


   Bases: :py:obj:`AccountingExeption`

   The Transaction date cannot be the exact beginning of the reporting period.


.. py:exception:: InvalidTransactionTypeError


   Bases: :py:obj:`AccountingExeption`

   The Transaction type cannot be changed as this would bypass subclass validations.


.. py:exception:: MissingEntityError


   Bases: :py:obj:`AccountingExeption`

   Accounting objects must all be associated with an Entity.


.. py:exception:: MissingLineItemError


   Bases: :py:obj:`AccountingExeption`

   A Transaction must have at least one Line Item to be posted.


.. py:exception:: MissingMainAccountAmountError


   Bases: :py:obj:`AccountingExeption`

   A Compound Journal Entry Transaction must have a main account amount.


.. py:exception:: MissingReportingPeriodError(entity, year)


   Bases: :py:obj:`AccountingExeption`

   The Entity does not have a reporting period for the given date.


.. py:exception:: MissingTaxAccountError


   Bases: :py:obj:`AccountingExeption`

   A non Zero Rate Tax must have an associated control account.


.. py:exception:: MultipleOpenPeriodsError


   Bases: :py:obj:`AccountingExeption`

   An Entity can only have one reporting period open at a time.


.. py:exception:: NegativeValueError(classname, attribute='amount')


   Bases: :py:obj:`AccountingExeption`

   Accounting amounts should not be negative.

   :param classname: The model in question.
   :type classname: DeclarativeBase
   :param attribute: The model attribute that must be greater than zero.


.. py:exception:: PostedTransactionError(message)


   Bases: :py:obj:`AccountingExeption`

   Changes are not allowed for a posted Transaction.

   :param message: The changes that are not allowed for a posted Transaction.
   :type message: str


.. py:exception:: RedundantTransactionError(line_item)


   Bases: :py:obj:`AccountingExeption`

   A Transaction main account cannot be used as the account for any of its Line Items.

   :param line_item: The line item in question.
   :type line_item: LineItem


.. py:exception:: SessionEntityError


   Bases: :py:obj:`AccountingExeption`

   The Session Entity should not be deleted.


.. py:exception:: UnbalancedTransactionError


   Bases: :py:obj:`AccountingExeption`

   Total Debit amounts do not match total Credit amounts.


.. py:exception:: UnassignableTransactionError(classname, transaction_types: list)


   Bases: :py:obj:`AccountingExeption`

   The Transaction type must be one of those given in the list.

   :param line_item: The line item in question.
   :type line_item: LineItem


.. py:exception:: UnclearableTransactionError(classname, transaction_types: list)


   Bases: :py:obj:`AccountingExeption`

   The Transaction type must be one of those given in the list.

   :param classname: The type of the Transaction.
   :type classname: Transaction.TransactionType
   :param transaction_types: The list of allowed Transactiom types for the Assignment.
   :type transaction_types: list


.. py:exception:: UnpostedAssignmentError


   Bases: :py:obj:`AccountingExeption`

   An unposted Transaction cannot be cleared or assigned.


.. py:exception:: SelfClearanceError


   Bases: :py:obj:`AccountingExeption`

   A Transaction cannot clear/be assigned to itself.


.. py:exception:: InvalidAssignmentAccountError


   Bases: :py:obj:`AccountingExeption`

   The main account for the cleared and clearing Transaction must be the same.


.. py:exception:: InvalidClearanceEntryTypeError(entry_type: str)


   Bases: :py:obj:`AccountingExeption`

   Transaction Entry increases the Main Account outstanding balance instead of reducing it.

   :param entry_type: The type of the Transaction entry.
   :type entry_type: Balance.BalanceType


.. py:exception:: CompoundTransactionAssignmentError


   Bases: :py:obj:`AccountingExeption`

   A compound Transaction cannot be cleared or assigned.


.. py:exception:: InsufficientBalanceError(assigning: str, amount: float, assigned: str)


   Bases: :py:obj:`AccountingExeption`

   Assigning Transaction does not have suffecient balance to
   clear the amount specified of the assigned.

   :param assigning: The type of the Transaction to be assigned.
   :type assigning: str
   :param amount: The amount to be assigned.
   :type amount: Decimal
   :param assigned: The type of the Transaction to be cleared.
   :type assigned: str


.. py:exception:: OverclearanceError(assigned: str)


   Bases: :py:obj:`AccountingExeption`

   The assigned Transaction has already been completely cleared.

   :param assigned: The type of the Transaction to be cleared.
   :type assigned: str


.. py:exception:: MixedAssignmentError(previous: str, current: str)


   Bases: :py:obj:`AccountingExeption`

   An assigned/cleared cannot be cleared/assigned.

   :param previous: The role played by the Transaction in a previous Assignment.
   :type previous: str
   :param current: The role played by the Transaction in the current Assignment.
   :type current: str


